syntax = "proto3";

package googlemrf;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// Interface exported by the server.
service GoogleMRF {

    // Obtains a single MRF code and its related info.
    //
    // If it is not found an empty MRF is returned.
    rpc MRFInfo(Query) returns (MRF) {}

    // Obtains all MRF codes known.
    rpc MRFs(Empty) returns (stream MRF) {}

    // Obtains all Agencies.
    rpc Agencies(Empty) returns (stream Single) {}

    // Obtains all LOBs known.
    rpc LOBs(Empty) returns (stream Single) {}

    // Obtains all Products known.
    rpc Products(Empty) returns (stream Double) {}

    // Obtains all SubProducts known.
    rpc SubProducts(Empty) returns (stream Double) {}

    // Obtains all Channels known.
    rpc Channels(Empty) returns (stream Single) {}

    // Obtains all Medias known.
    rpc Medias(Empty) returns (stream Double) {}

    // Obtains all SubMedias known.
    rpc SubMedias(Empty) returns (stream Double) {}

    // The following methods check to see if the
    // described object exists.
    //
    // In the case of something like a product, the query
    // can be provided with both the name of the product
    // and the parent line of business. If the combination
    // of product and LOB does not exist empty will be
    // returned.
    //
    // Returns an empty instance if it is not found.
    rpc ValidateMRF(Query) returns (MRF) {
        option (google.api.http) = {
            get: "/api/v1/mrfs/{name}"
        };
    }
    rpc ValidateAgency(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/agencies/{name}"
        };
    }
    rpc ValidateChannel(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/channels/{name}"
        };
    }
    rpc ValidateLOB(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/lobs/{name}"
        };
    }
    rpc ValidateMedia(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/medias/{name}"
        };
    }
    rpc ValidateProduct(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/products/{name}"
        };
    }
    rpc ValidateSubMedia(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/submedias/{name}"
        };
    }
    rpc ValidateSubProduct(Query) returns (Single) {
        option (google.api.http) = {
            get: "/api/v1/subproducts/{name}"
        };
    }

    // All 'long tail' mrfs.
    rpc LongTailMRFs(Empty) returns (MRFList) {
        option (google.api.http) = {
            get: "/api/v1/longtails"
        };
    }
}

message Empty {}

// Describes the query options available.
message Query {
    string name = 1;
    string parent = 2;
}

// Describes an MRF code.
message MRF {
    string Submitter = 1;
    string ID = 2;
    string Name = 3;
    string Product = 4;
    string ProductCode = 5;
    string SubProduct = 6;
    string CostCenter = 7;
    string PrimaryRegion = 8;
    int32 Year = 9;
    int32 Quarter = 10;
    bool Approved = 11;
    bool LongTail = 12;
    string MediaCode = 13;
    google.protobuf.Timestamp SubmissionDate = 14;
    google.protobuf.Timestamp CloseDate = 15;
    google.protobuf.Timestamp InitialApprovalDate = 16;
    string HelpText = 17;
}

// A list of MRFs.
message MRFList {
    repeated MRF Mrfs = 1;
}

// Describes a model with no parent, {Agency, Channel, LOB}
message Single {
    string Name = 1;
    string ID = 2;
}

// Describes a model with a parent, {Media, Product, SubMedia, SubProduct}
message Double {
    string Name = 1;
    string Parent = 2;
    string ID = 3;
}
